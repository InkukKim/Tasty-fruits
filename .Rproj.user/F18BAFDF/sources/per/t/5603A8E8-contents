library(haven)
library(readr)
library(lavaan)
library(psych)
library(semPlot)
library(Hmisc)

##loading data and computing the means----------------------------------
df <- read_sav("Data/Korean_NMC OSF.sav")

df$MI <- rowMeans(df[paste0("NMC_", c(1,3,5,7,9,11))])
df$MPP <- rowMeans(df[paste0("NMC_", c(2,12,14,16,17))])
df$CD <- rowMeans(df[paste0("NMC_", c(4,6,8,15))])

df$BELONG <- rowMeans(df[paste0("Belong", 1:12)])

df$FLOUR <- rowMeans(df[paste0("FLSWL_", 1:8)])
df$SWLS <- rowMeans(df[paste0("FLSWL_", 9:13)])


df$PAF <- rowMeans(df[paste0("PANAS", c(1,8,9,10))])
df$NAF <- rowMeans(df[paste0("PANAS", c(2,3,5,6,7))])

## mean, SD ,and intercorrelation---------------------------------------------
psych::describe(df[c("MI", "MPP", "CD", "BELONG", "FLOUR", "SWLS","PAF", "NAF")])

rcorr(as.matrix(df[c("MI", "MPP", "CD", "BELONG", "FLOUR", "SWLS","PAF", "NAF")]))

## REliabilities---------------------------------------------------------------
userfriendlyscience::reliability(df[paste0("NMC_", c(1,3,5,7,9,11,13))],itemDiagnostics = TRUE)
userfriendlyscience::reliability(df[paste0("NMC_", c(1,3,5,7,9,11))],itemDiagnostics = TRUE)

userfriendlyscience::reliability(df[paste0("NMC_", c(2,10,12,14,16,17))],itemDiagnostics = TRUE)
userfriendlyscience::reliability(df[paste0("NMC_", c(2,12,14,16,17))],itemDiagnostics = TRUE)

userfriendlyscience::reliability(df[paste0("NMC_", c(4,6,8,15))])

userfriendlyscience::reliability(df[paste0("Belong", c(1:12))])

userfriendlyscience::reliability(df[paste0("FLSWL_", c(1:8))])
userfriendlyscience::reliability(df[paste0("FLSWL_", c(9:13))])

userfriendlyscience::reliability(df[paste0("PANAS", c(1,8,9,10))])
userfriendlyscience::reliability(df[paste0("PANAS", c(2,3,5,6,7))])

## the average inter-item correlations---------------------------------
corMat <- cor(df[paste0("NMC_", c(1,3,5,7,9,11))], use = "pairwise")
(corMat[1,2]+corMat[1,3]+corMat[1,4]+corMat[1,5]+corMat[1,6]+
    corMat[2,3]+corMat[2,4]+corMat[2,5]+corMat[2,6]+
    corMat[3,4]+corMat[3,5]+corMat[3,6]+
  corMat[4,5]+corMat[4,6]+corMat[5,6])/15
  

corMat <- cor(df[paste0("NMC_", c(2,12,14,16,17))], use = "pairwise")
(corMat[1,2]+corMat[1,3]+corMat[1,4]+corMat[1,5]+
    corMat[2,3]+corMat[2,4]+corMat[2,5]+
    corMat[3,4]+corMat[3,5]+
    corMat[4,5])/10

corMat <- cor(df[paste0("NMC_", c(4,6,8,15))], use = "pairwise")

(corMat[1,2]+corMat[1,3]+corMat[1,4]+
    corMat[2,3]+corMat[2,4]+
    corMat[3,4])/6

## Validity of the latent variable--------------------------------------------

model_SWB = 'FLOUR2 =~ FLSWL_1 + FLSWL_2 + FLSWL_3 + FLSWL_4 
                      + FLSWL_5 + FLSWL_6 + FLSWL_7 + FLSWL_8
             SWLS2 =~ FLSWL_9 + FLSWL_10 + FLSWL_11 + FLSWL_12 + FLSWL_13
             PAF2 =~ PANAS1 + PANAS4 + PANAS8 + PANAS9 + PANAS10
             NAF2 =~ PANAS2 + PANAS3 + PANAS5 + PANAS6 + PANAS7
             WELL =~ FLOUR2 + PAF2 + SWLS2 + NAF2'

fit_SWB <- cfa(model_SWB,data=df,missing="fiml.x")

summary(fit_SWB, fit.measures=TRUE, standardized = TRUE)

## SEM analysis-------------------------------------------------------------

semmodel1 = 'SWB =~ FLOUR + SWLS + PAF + NAF
             SWB ~ MI + MPP + CD'


set.seed(2019)

model.fit1 <- sem(semmodel1, data = df, estimator = "ML",
         se = "bootstrap", verbose = TRUE, bootstrap = 5000, 
         missing = "fiml.x", std.lv = TRUE)
summary(model.fit1, rsquare=TRUE, standardized = TRUE, fit.measures=TRUE, ci = TRUE)


semmodel2 = 'SWB =~ FLOUR + SWLS + PAF + NAF
BELONG ~ a * MI + b * MPP + c * CD
SWB ~ d * BELONG + e * MI + f * MPP + g * CD

indirect_MI := a*d
direct_MI := e
total_MI := e + (a*d)

indirect_MPP := b*d
direct_MPP := f
total_MPP := f + (b*d)

indirect_CD := c*d
direct_CD := g
total_CD := g + (c*d)'



set.seed(2019)
model.fit2 <- sem(semmodel2, data = df, estimator = "ML",
                 se = "bootstrap", verbose = TRUE, bootstrap = 5000, 
                 missing = "fiml.x", std.lv = TRUE)

summary(model.fit2, rsquare=TRUE, standardized = TRUE, fit.measures=TRUE, ci = TRUE)


##MC Interval--------------------------------------------------------------
set.seed(2019)
med_MI <- 'a*d'

semTools::monteCarloMed(expression = med_MI, object = model.fit2)

med_MPP <- 'b*d'

semTools::monteCarloMed(expression = med_MPP, object = model.fit2)

med_CD <- 'c*d'

semTools::monteCarloMed(expression = med_CD, object = model.fit2)
