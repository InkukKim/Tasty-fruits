library(readr)
library(car)
library(effsize)
df <- read_csv("Data/Test1.csv")
t.test(df$Math, mu = 80)
View(df)
df$Class <- factor(df$Class, levels = c("0","1"),labels = c("A","B"))
View(df)
leveneTest(df$Math, df$Class)
t.test(df$Math ~ df$Class)
t.test(df$Math ~ df$Class, var = TRUE)
cohen.d(df$Math ~ df$Class)
t.test(df$English1, df$English2, paired = TRUE)
describe(df$English1)
library(psych)
describe(df$English1)
describe(df$English2)
rcorr(as.matrix(df[c("Math","English1","English2")]))
library(Hmisc)
rcorr(as.matrix(df[c("Math","English1","English2")]))
cor.test(df$Math, df$English1)
cor.test(df$Math, df$English1)
library(haven)
df <- read_sav("Data/climate study 1.sav")
View(df)
View(df)
recode(df$liking_1,"1=7; 2=6; 3=5; 5=3; 6=2; 7=1")
recode(df$liking_1,"1=7; 2=6; 3=5; 5=3; 6=2; 7=1")
library(car)
recode(df$liking_1,"1=7; 2=6; 3=5; 5=3; 6=2; 7=1")
df$liking_1 <- recode(df$liking_1,"1=7; 2=6; 3=5; 5=3; 6=2; 7=1")
df$linking <- rowMeans(df[paste0("liking_", c(1,2,3,4,5))])
df$envatt <- rowMeans(df[paste0("envatt_", c(5:10))])
df <- read_sav("Data/climate study 1.sav")
df$linking <- rowMeans(df[paste0("liking_", c(1,2,3,4,5))])
df$envatt <- rowMeans(df[paste0("envatt_", c(5:10))])
df <- read_sav("Data/climate study 1.sav")
df$likingM <- rowMeans(df[paste0("liking_", c(1,2,3,4,5))])
df$envattM <- rowMeans(df[paste0("envatt_", c(5:10))])
userfriendlyscience::reliability(df[paste0("liking_", c(1:5))])
library(haven)
library(car)
library(userfriendlyscience)
df <- read_sav("Data/climate study 1.sav")
df$liking_1 <- car::recode(df$liking_1,"1=7; 2=6; 3=5; 5=3; 6=2; 7=1")
df$likingM <- rowMeans(df[paste0("liking_", c(1,2,3,4,5))])
userfriendlyscience::reliability(df[paste0("liking_", c(1:5))])
library(Hmisc)
psych::describe(df[c("likingM", "envattM")])
library(haven)
library(car)
library(psych)
library(userfriendlyscience)
library(Hmisc)
df <- read_sav("Data/climate study 1.sav")
df$liking_1 <- car::recode(df$liking_1,"1=7; 2=6; 3=5; 5=3; 6=2; 7=1")
df$likingM <- rowMeans(df[paste0("liking_", c(1,2,3,4,5))])
df$envattM <- rowMeans(df[paste0("envatt_", c(5:10))])
userfriendlyscience::reliability(df[paste0("liking_", c(1:5))])
psych::describe(df[c("likingM", "envattM")])
Hmisc::rcorr(as.matrix(df[c("pol","likingM","envattM")]))
psych::describe(df[c("gender","pol","likingM", "envattM")])
psych::describe(df[c("gender","pol","likingM", "envattM")])
psych::describe(df[c("gend","pol","likingM", "envattM")])
Hmisc::rcorr(as.matrix(df[c("pol","likingM","envattM")]))
Hmisc::rcorr(as.matrix(df[c("gend","pol","likingM","envattM")]))
df$gend <- factor(df$gend, levels = c("1","2"),labels = c("male","female"))
Hmisc::rcorr(as.matrix(df[c("gend","pol","likingM","envattM")]))
psych::describe(df[c("pol","likingM", "envattM")])
Hmisc::rcorr(as.matrix(df[c("pol","likingM","envattM")]))
userfriendlyscience::reliability(df[paste0("liking_", c(1:5))])
df$gend <- factor(df$gend, levels = c("1","2"),labels = c("male","female"))
library(haven)
library(car)
library(psych)
library(userfriendlyscience)
library(Hmisc)
df <- read_sav("Data/climate study 1.sav")
df$liking_1 <- car::recode(df$liking_1,"1=7; 2=6; 3=5; 5=3; 6=2; 7=1")
df$gend <- factor(df$gend, levels = c("1","2"),labels = c("male","female"))
df$gend <- factor(df$gend, levels = c("male","female"),labels = c("1","2"))
df$le <- rowMeans(df[c("liking_1","envatt_5")])
df$le2 <- (liking_1 + envatt_5) /2
df$le2 <- (df$liking_1 + df$envatt_5)/2
Hmisc::rcorr(df[c("pol","likingM","envattM")]))
Hmisc::rcorr(as.matrix(df[c("pol","likingM","envattM")]))
library(haven)
library(car)
library(psych)
library(userfriendlyscience)
library(Hmisc)
df <- read_sav("Data/climate study 1.sav")
df$liking_1 <- car::recode(df$liking_1,"1=7; 2=6; 3=5; 5=3; 6=2; 7=1")
df$gend <- factor(df$gend, levels = c("1","2"),labels = c("male","female"))
df$gend <- factor(df$gend, levels = c("male","female"),labels = c("1","2"))
df$likingM <- rowMeans(df[paste0("liking_", c(1,2,3,4,5))])
df$envattM <- rowMeans(df[paste0("envatt_", c(5:10))])
df$le <- rowMeans(df[c("liking_1","envatt_5")])
df$le2 <- (df$liking_1 + df$envatt_5)/2
psych::describe(df[c("pol","likingM", "envattM")])
Hmisc::rcorr(df[c("pol","likingM","envattM")])
Hmisc::rcorr(as.matrix(df[c("pol","likingM","envattM")]))
lm_test_interaction <- function(simNum, N, b1, b2, b3, b0=0, x1m=0, x1sd=1,
x2m=0, x2sd=1) {
x1 <- rnorm(N, x1m, x1sd)
x2 <- rnorm(N, x2m, x2sd)
yvar <- sqrt(1 - b1^2 - b2^2 - b3^2)  # residual variance
y <- rnorm(N, b0 + b1*x1 + b2*x2 + b3*x1*x2, yvar)
model <- lm(y ~ x1 * x2)
# pull output from model (two main effects and interaction)
est_x1 <- coef(summary(model))['x1', 'Estimate']
p_x1 <- coef(summary(model))['x1', 'Pr(>|t|)']
sig_x1 <- p_x1 < .05
est_x2 <- coef(summary(model))['x2', 'Estimate']
p_x2 <- coef(summary(model))['x2', 'Pr(>|t|)']
sig_x2 <- p_x2 < .05
est_int <- coef(summary(model))['x1:x2', 'Estimate']
p_int <- coef(summary(model))['x1:x2', 'Pr(>|t|)']
sig_int <- p_int < .05
return(c(est_x1=est_x1, p_x1=p_x1, sig_x1=sig_x1, est_x2=est_x2, p_x2=p_x2,
sig_x2=sig_x2, est_int=est_int, p_int=p_int, sig_int=sig_int))
}
# varying N at 200 and 300; setting coefficient of x1 = .15, coefficient of
# x2 = 0, and coefficien of interaction = .3
power_lm_int <- grid_search(lm_test_interaction, params=list(N=c(200, 300)),
n.iter=5000, output='data.frame', b1=.15, b2=0, b3=.3, parallel='snow', ncpus=4)
results(power_lm_int) %>%
group_by(N.test) %>%
summarise(
power_x1=mean(sig_x1),
power_x2=mean(sig_x2),
power_int=mean(sig_int))
lm_test_interaction <- function(simNum, N, b1, b2, b3, b0=0, x1m=0, x1sd=1,
x2m=0, x2sd=1) {
x1 <- rnorm(N, x1m, x1sd)
x2 <- rnorm(N, x2m, x2sd)
yvar <- sqrt(1 - b1^2 - b2^2 - b3^2)  # residual variance
y <- rnorm(N, b0 + b1*x1 + b2*x2 + b3*x1*x2, yvar)
model <- lm(y ~ x1 * x2)
# pull output from model (two main effects and interaction)
est_x1 <- coef(summary(model))['x1', 'Estimate']
p_x1 <- coef(summary(model))['x1', 'Pr(>|t|)']
sig_x1 <- p_x1 < .05
est_x2 <- coef(summary(model))['x2', 'Estimate']
p_x2 <- coef(summary(model))['x2', 'Pr(>|t|)']
sig_x2 <- p_x2 < .05
est_int <- coef(summary(model))['x1:x2', 'Estimate']
p_int <- coef(summary(model))['x1:x2', 'Pr(>|t|)']
sig_int <- p_int < .05
return(c(est_x1=est_x1, p_x1=p_x1, sig_x1=sig_x1, est_x2=est_x2, p_x2=p_x2,
sig_x2=sig_x2, est_int=est_int, p_int=p_int, sig_int=sig_int))
}
# varying N at 200 and 300; setting coefficient of x1 = .15, coefficient of
# x2 = 0, and coefficien of interaction = .3
power_lm_int <- grid_search(lm_test_interaction, params=list(N=c(200, 300)),
n.iter=5000, output='data.frame', b1=.15, b2=0, b3=.3, parallel='snow', ncpus=4)
install.packages("grid_Search")
library(grid_Search)
library(grid_search)
library(installr)
updateR()
install.packages("grid_Search")
lm_test_interaction <- function(simNum, N, b1, b2, b3, b0=0, x1m=0, x1sd=1,
x2m=0, x2sd=1) {
x1 <- rnorm(N, x1m, x1sd)
x2 <- rnorm(N, x2m, x2sd)
yvar <- sqrt(1 - b1^2 - b2^2 - b3^2)  # residual variance
y <- rnorm(N, b0 + b1*x1 + b2*x2 + b3*x1*x2, yvar)
model <- lm(y ~ x1 * x2)
# pull output from model (two main effects and interaction)
est_x1 <- coef(summary(model))['x1', 'Estimate']
p_x1 <- coef(summary(model))['x1', 'Pr(>|t|)']
sig_x1 <- p_x1 < .05
est_x2 <- coef(summary(model))['x2', 'Estimate']
p_x2 <- coef(summary(model))['x2', 'Pr(>|t|)']
sig_x2 <- p_x2 < .05
est_int <- coef(summary(model))['x1:x2', 'Estimate']
p_int <- coef(summary(model))['x1:x2', 'Pr(>|t|)']
sig_int <- p_int < .05
return(c(est_x1=est_x1, p_x1=p_x1, sig_x1=sig_x1, est_x2=est_x2, p_x2=p_x2,
sig_x2=sig_x2, est_int=est_int, p_int=p_int, sig_int=sig_int))
}
# varying N at 200 and 300; setting coefficient of x1 = .15, coefficient of
# x2 = 0, and coefficien of interaction = .3
power_lm_int <- grid_search(lm_test_interaction, params=list(N=c(200, 300)),
n.iter=5000, output='data.frame', b1=.15, b2=0, b3=.3, parallel='snow', ncpus=4)
results(power_lm_int) %>%
group_by(N.test) %>%
summarise(
power_x1=mean(sig_x1),
power_x2=mean(sig_x2),
power_int=mean(sig_int))
lm_test_simple <- function(simNum, N, b1, b2, b3, b0=0, x1m=0, x1sd=1, x2m=0, x2sd=1) {
x1 <- rnorm(N, x1m, x1sd)
x2 <- rnorm(N, x2m, x2sd)
yvar <- sqrt(1 - b1^2 - b2^2 - b3^2)
y <- rnorm(N, b0 + b1*x1 + b2*x2 + b3*x1*x2, yvar)
model <- lm(y ~ x1 * x2)  # here is the original model
est_int <- coef(summary(model))['x1:x2', 'Estimate']
p_int <- coef(summary(model))['x1:x2', 'Pr(>|t|)']
sig_int <- p_int < .05
# calculate x1 at +/- 1 SD, to look at simple effects
x1minus1sd <- x1 - mean(x1) + sd(x1)
x1plus1sd <- x1 - mean(x1) - sd(x1)
# new models to examine simple effects
model2 <- lm(y ~ x1minus1sd * x2)
model3 <- lm(y ~ x1plus1sd * x2)
# test effect of x2 when x1 is at +/- 1 SD
est_x2_minus1 <- coef(summary(model2))['x2', 'Estimate']
p_x2_minus1 <- coef(summary(model2))['x2', 'Pr(>|t|)']
sig_x2_minus1 <- p_x2_minus1 < .05
est_x2_plus1 <- coef(summary(model3))['x2', 'Estimate']
p_x2_plus1 <- coef(summary(model3))['x2', 'Pr(>|t|)']
sig_x2_plus1 <- p_x2_plus1 < .05
return(c(est_int=est_int, p_int=p_int, sig_int=sig_int,
est_x2_minus1=est_x2_minus1, p_x2_minus1=p_x2_minus1,
sig_x2_minus1=sig_x2_minus1, est_x2_plus1=est_x2_plus1,
p_x2_plus1=p_x2_plus1, sig_x2_plus1=sig_x2_plus1))
}
power_lm_simple <- grid_search(lm_test_simple, params=list(N=c(200, 300)),
n.iter=5000, output='data.frame', b1=.15, b2=0, b3=.3, parallel='snow', ncpus=4)
results(power_lm_simple) %>%
group_by(N.test) %>%
summarise(
power_x2_minus1=mean(sig_x2_minus1),
power_x2_plus1=mean(sig_x2_plus1))
library(readr)
library(car)
library(effsize)
library(psych)
library(Hmisc)
library(haven)
df <- read_sav("Data/Climate Study 1.sav")
library(readr)
library(car)
library(effsize)
library(psych)
library(Hmisc)
library(haven)
df <- read_sav("Data/Climate Study 1.sav")
View(df)
View(df)
lm(liking ~ pol*past)
df <- read_sav("Data/Climate Study 1.sav")
lm(liking ~ pol*past,df)
a <- lm(liking ~ pol*past,df) %>%
summary()
a <- lm(liking ~ pol*past,df) %>%
summary(a)
a <- lm(liking ~ pol*past,df)
summary(a)
a <- lm(liking ~ pol*past,df)
summary(a,standardized = TRUE)
library(QuantPsyc)
install.packages("QuantPsyc")
library(QuantPsyc)
a <- lm.beta(liking ~ pol*past,df)
summary(a,standardized = TRUE)
a <- lm(liking ~ pol*past,df)
lm.beta(a)
b <- lm(envatt ~ pol*past,df)
lm.beta(b)
